"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import bot_core

class images_t(object):
    """
    simple array of images
    introduced to support Multisense SL disparity data
    this message is now integrated into libbot
    and should be sync'ed there
    """

    __slots__ = ["utime", "n_images", "image_types", "images"]

    __typenames__ = ["int64_t", "int32_t", "int16_t", "bot_core.image_t"]

    __dimensions__ = [None, None, ["n_images"], ["n_images"]]

    LEFT = 0
    RIGHT = 1
    DISPARITY = 2
    MASK_ZIPPED = 3
    """ 16bit as in the multisense """
    DEPTH_MM = 4
    """ gray scale mask of left image, zipped with zlib """
    DISPARITY_ZIPPED = 5
    """ z depth, values similar to the OpenNI format """
    DEPTH_MM_ZIPPED = 6
    """ 16bit as in the multisense, zipped with zlib  """

    def __init__(self):
        self.utime = 0
        """ LCM Type: int64_t """
        self.n_images = 0
        """ LCM Type: int32_t """
        self.image_types = []
        """ LCM Type: int16_t[n_images] """
        self.images = []
        """ LCM Type: bot_core.image_t[n_images] """

    def encode(self):
        buf = BytesIO()
        buf.write(images_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.n_images))
        buf.write(struct.pack('>%dh' % self.n_images, *self.image_types[:self.n_images]))
        for i0 in range(self.n_images):
            assert self.images[i0]._get_packed_fingerprint() == bot_core.image_t._get_packed_fingerprint()
            self.images[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != images_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return images_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = images_t()
        self.utime, self.n_images = struct.unpack(">qi", buf.read(12))
        self.image_types = struct.unpack('>%dh' % self.n_images, buf.read(self.n_images * 2))
        self.images = []
        for i0 in range(self.n_images):
            self.images.append(bot_core.image_t._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if images_t in parents: return 0
        newparents = parents + [images_t]
        tmphash = (0xfbe98784e0a4fbad+ bot_core.image_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if images_t._packed_fingerprint is None:
            images_t._packed_fingerprint = struct.pack(">Q", images_t._get_hash_recursive([]))
        return images_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", images_t._get_packed_fingerprint())[0]

